# Node docker image on which this would be run
image: node:latest

variables:
   npm_config_cache: "$CI_PROJECT_DIR/.npm"
   NODE_ENV: 'test'

cache:
   key:
     files:
        - package.json
   paths:
      - .npm
      - node_modules

services:
   - mongo

stages:
  - install
  - build
  - test
  - staging
  - production

# Jobs:

install_dependencies:
  stage: install
  script:
    - npm ci

Build_api:
  stage: build
  before_script:
     - npm run clean
  script:
    - npm run build

test_api:
  stage: test
  script:
    - npm test

deploy_swagger_staging:
  image: ruby:latest
  stage: staging
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:  
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_STAGING --api-key=$HEROKU_API_KEY
    - echo "Deployed to staging server"

deploy_api_staging:
  stage: staging
  environment:
    name: development
  script:
    - npm i
    # your build command
    - npm run build:lambda
    - npx netlify-cli deploy --site $NETLIFY_DEVELOPMENT_SITE_ID --auth $NETLIFY_AUTH_TOKEN

deploy_api_production:
  stage: production
  environment:
    name: production
    url: https://api.netlify.com/build_hooks/5fea4c553d8a2c2a21c97566
  when: manual
  only:
    - develop
  script:
    - npm i
    # your build command
    - npm run build:lambda
    - npx netlify-cli deploy --site $NETLIFY_PRODUCTION_SITE_ID --auth $NETLIFY_AUTH_TOKEN --prod

deploy_api_production:
  stage: production
  environment:
    name: production
    url: https://api.netlify.com/build_hooks/5fea4c553d8a2c2a21c97566
  only:
    - master
  script:
    - npm i
    # your build command
    - npm run build:lambda
    - npx netlify-cli deploy --site $NETLIFY_PRODUCTION_SITE_ID --auth $NETLIFY_AUTH_TOKEN --prod